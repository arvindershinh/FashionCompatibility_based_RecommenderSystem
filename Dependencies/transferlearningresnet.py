# -*- coding: utf-8 -*-
"""TransferLearningResnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GH8HBwG_YcgFhm9I32_zskWzAJ1wIqcm
"""

import jax.numpy as jnp
import numpy as np

# from google.colab import drive
# drive.mount('/content/gdrive')

# import outfitprocessing as data

from keras.models import Model
from keras.layers import AvgPool2D
from keras.layers import Flatten
from keras.applications.resnet import ResNet50
import itertools
import cv2
import pandas as pd
import matplotlib.pyplot as plt

# resnetInput = np.array(data.a['img_seq']) # (10, 299, 299, 3)
# resnetInput = np.array(data.sequence_Tensor['outfitSequencesImage'])[0]
# (8, 224, 224, 3)

def getResNetModel(inputShape):
  resnet_model = ResNet50(input_shape=inputShape, weights='imagenet', include_top=False)

  # Make all layers non-trainable
  for layer in resnet_model.layers:
      layer.trainable = False

  output_conv5_block3_2_bn = resnet_model.layers[-6].output
  output_avgPool = AvgPool2D(pool_size=(7, 7))(output_conv5_block3_2_bn)
  output_flatten = Flatten()(output_avgPool)

  model = Model(inputs = resnet_model.input, outputs = output_flatten)

  return model

"""CACHE"""

# def getResNetModel(inputShape):
#   resnet_model = ResNet50(input_shape=inputShape, weights='imagenet', include_top=False)

#   # Make all layers non-trainable
#   for layer in resnet_model.layers:
#       layer.trainable = False

#   x = Flatten()(resnet_model.output)
#   model = Model(inputs = resnet_model.input, outputs = x)

#   return model

# input_shape = (224, 224, 3)

# model = getResNetModel(input_shape)

# feature_vector = model.predict(resnetInput)

# feature_vector.shape

# resnetInput_include_top = resnetInput[:, :224, :224, :]
# # (10, 224, 224, 3)
# input_shape_include_top = resnetInput_include_top.shape[1:]  # (224, 224, 3)

"""Jalay Comments"""

# avg pooling 2048 opt1

# model = Model(inputs = resnet_model.input, outputs = resnet_model.get_layer_by_name('con_bn_5c its ').output) # 7*7*512
  # then do avg pooling 1*1*512 then flatten it